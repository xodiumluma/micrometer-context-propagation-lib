buildscript {
  dependencyLocking {
    lockAllConfigurations()
  }

  repositories {
    mavenCentral()
    gradlePluginPortal()
  }

  dependencies {
    classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1'
    classpath 'com.netflix.nebula:nebula-release-plugin:16.1.0'
    classpath 'com.netflix.nebula:nebula-publishing-plugin:20.1.0'
    classpath 'com.netflix.nebula:nebula-project-plugin:10.1.2'
    classpath 'io.spring.nohttp:nohttp-gradle:0.0.11'
    classpath 'io.github.gradle-nexus:publish-plugin:1.3.0'
    classpath 'io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.38'

    constraints {
      classpath('org.ow2.asm:asm:7.3.1') {
        because 'Flow with latest JDK'
      }
    }
  }

  configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'

  // @todo: get rid of this hack (https://github.com/nebula-plugins/nebula-release-plugin/issues/213)
  def releaseStage = findProperty('release.stage')
  apply plugin: 'nebula.release'
  release.defaultVersionStrategy = nebula.plugin.release.git.opionion.Strategies.SNAPSHOT

  apply plugin: 'io.github.gradle-nexus.publish-plugin'
  apply from: 'dependencies.gradle'
}

allprojects {
  group = 'io.micrometer'
  ext.'release.stage' = releaseStage ?: 'SNAPSHOT'

  afterEvaluate { project -> println "Configuring $project.name, version $project.version" }
}

subprojects {
  apply plugin: 'signing'
  apply plugin: 'io.spring.javaformat'
  apply plugin: 'java-library'
  apply plugin: 'com.github.hierynomus.license'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.nohttp'

  java {
    // not publishing Gradle metadata
    // just use this method to register optional dependency
    // Normally we define features for sets of optional dependencies
    // take for example 'dropwizard' and 'reactor'
    // For libraries that publish Gradle metadata, users can
    // use feature names in dependency blocks rather than 
    // being aware (granularly) of all the optional dependencies 
    // But as per above - we're not publishing Gradle metadata
    registerFeature('optional') {
      usingSourceSet(sourceSets.main)
    }
  }

  // add annotations here
  // otherwise it's very inconvenient to expose optional annotations
  // downstream (which we don't do) 
  // Since we don't expose the annotations, we have to add them to every project
  // JSR-305 used only for optional meta-annotations
  dependencies {
    optionalApi 'com.google.code.findbugs:jsr305:latest-release'
    checkstyle('io.spring.javaformat:spring-javaformat-checkstyle:latest-release')
  }

  tasks {
    compileJava {
      options.encoding = 'UTF-8'
      options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'

      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8

      // make sure that we stay on Java 8!
      if (JavaVersion.current().isJava9Compatible()) {
        options.release = 8
      }
    }
    compileTestJava {
      options.encoding = 'UTF-8'
      options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8
    }

    javadoc {
      configure(options) {
        tags(
          'apiNote:a:API Note:',
          'implSpec:a:Implementation Requirements:',
          'implNote:a:Implementation Note:'
        )
      }
    }
  }
}